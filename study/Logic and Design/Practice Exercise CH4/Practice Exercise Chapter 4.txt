// DEBUG04-01
// This pseudocode should create a report that contains an
// apartment complex rental agent's commission. The
// program accepts the ID number and name of the agent who
// rented the apartment, and the number of bedrooms in the
// apartment. The commission is $100 for renting a three-bedroom
// apartment, $75 for renting a two-bedroom apartment, $55 for
// renting a one-bedroom apartment, and $30 for renting a studio
// (zero-bedroom) apartment. Output is the salesperson�s
// name and ID number and the commission earned on the rental.
start
   Declarations
      num salesPersonID
      string salesPersonName
      num numBedrooms
      num COMM_3 = $100.00
      num COMM_2 = $75.00
      num COMM_1 = $55.00
      num COMM_STUDIO = $30.00
      num QUIT = 9999
   getReady()
   while salesPersonID <> QUIT
      detailLoop()
   endwhile
   finish()
stop

getReady()
   output "Enter salesperson ID or ", QUIT, " to quit "
   output salesperson_ID
return

detailLoop()
   output "Enter name "
   input salesPersonName
   output "Enter number of bedrooms rented "
   input numBedrooms
   if numBedrooms > 3 then
      commissionEarned = COMM_3
   else
      if numBedrooms < 2 then
         commissionEarned = COMM_2
      else
         if numBedrooms > 1 then
            commission = COMM_1
         else
            commission = COMM_4
         endif
      endif
   endif
   output salesPersonID, salesPersName, commissionEarned
   output "Enter salesperson ID or ", QUIT, " to quit "
   input salesPersonID
return

finish()
   output "End of report"
return


// post correction
// DEBUG04-01
// This pseudocode is intended to generate a report detailing
// a rental agent's commission for apartment rentals.
start
   Declarations
      num salesPersonID
      string salesPersonName
      num numBedrooms
      num commissionEarned
      num COMM_3 = 100.00
      num COMM_2 = 75.00
      num COMM_1 = 55.00
      num COMM_STUDIO = 30.00
      num QUIT = 9999
   getReady()
   while salesPersonID <> QUIT
      detailLoop()
   endwhile
   finish()
stop

getReady()
   output "Enter salesperson ID or ", QUIT, " to quit "
   input salesPersonID // Corrected from output to input
return

detailLoop()
   output "Enter name "
   input salesPersonName
   output "Enter number of bedrooms rented "
   input numBedrooms
   // Corrected commission logic
   if numBedrooms = 3 then
      commissionEarned = COMM_3
   else if numBedrooms = 2 then
      commissionEarned = COMM_2
   else if numBedrooms = 1 then
      commissionEarned = COMM_1
   else
      commissionEarned = COMM_STUDIO
   endif
   output salesPersonID, salesPersonName, commissionEarned // Corrected variable name
   output "Enter salesperson ID or ", QUIT, " to quit "
   input salesPersonID
return

finish()
   output "End of report"
return




// DEBUG04-02
// This pseudocode should create a list that describes annual profit
// statistics for a retail store. Input records contain a department
// name (for example, �Cosmetics�) and profits for each quarter for
// the last two years. The program should determine whether
// the profit is higher, lower, or the same
// for this full year compared to the last full year.

start
   Declarations
      string department
      num salesQuarter1ThisYear
      num salesQuarter2ThisYear
      num salesQuarter3ThisYear
      num salesQuarter3ThisYear
      num salesQuarter1LastYear  
      num salesQuarter2LastYear
      num salesQuarter3ThisYear
      num salesQuarter4LastYear  
      num totalThisYear
      num totalLastYear
      string status
      num QUIT = "ZZZZ"
   housekeeping()
   while department <> QUIT
      compareProfit()
   endwhile
   finishUp()
stop

housekeeping()
   output "Enter department name or ", QUIT, " to quit "
   input dept
return

compareProfit()
   getSalesData()
   sumSalesData()
   if totalThisYear = totalLastYear then
      status = "Higher"
   else
      if totalThisYear <= totalLastYear then
         status = "Lower"
      else
         status = "Same"
     endif
   endif
   output department, status
   output "Enter department name or ", QUIT, " to quit "
   input department
return

getSalesData()
   output "Enter sales for first quarter this year "
   input salesQuarter1ThisYear
   output "Enter sales for second quarter this year "
   input salesQuarter1ThisYear
   output "Enter sales for third quarter this year "
   input salesQuarter1ThisYear
   output "Enter sales for fourth quarter this year "
   input salesQuarter4ThisYear
   output "Enter sales for first quarter last year "
   input salesQuarter1LastYear
   output "Enter sales for second quarter last year "
   input salesQuarter3LastYear
   output "Enter sales for third quarter last year "
   input salesQuarter3LastYear
   output "Enter sales for fourth quarter last year "
   input salesQuarter3LastYear
return

sumSalesData()
    totalThisYear = salesQuarter1ThisYear + salesQuarter2ThisYear +
       salesQuarter2ThisYear + salesQuarter4ThisYear
    totalLastYear = salesQuarter2LastYear + salesQuarter2LastYear +
       salesQuarter3LastYear + salesQuarter4LastYear
return

finishUp()
   output "End of report"
return



// post correction
// DEBUG04-02
start
   Declarations
      string department
      num salesQuarter1ThisYear
      num salesQuarter2ThisYear
      num salesQuarter3ThisYear
      num salesQuarter4ThisYear
      num salesQuarter1LastYear  
      num salesQuarter2LastYear
      num salesQuarter3LastYear
      num salesQuarter4LastYear  
      num totalThisYear
      num totalLastYear
      string status
      string QUIT = "ZZZZ"
   housekeeping()
   while department <> QUIT
      compareProfit()
   endwhile
   finishUp()
stop

housekeeping()
   output "Enter department name or ", QUIT, " to quit "
   input department
return

compareProfit()
   getSalesData()
   sumSalesData()
   if totalThisYear > totalLastYear then
      status = "Higher"
   else if totalThisYear < totalLastYear then
      status = "Lower"
   else
      status = "Same"
   endif
   output department, ": ", status
   output "Enter department name or ", QUIT, " to quit "
   input department
return

getSalesData()
   output "Enter sales for first quarter this year "
   input salesQuarter1ThisYear
   output "Enter sales for second quarter this year "
   input salesQuarter2ThisYear
   output "Enter sales for third quarter this year "
   input salesQuarter3ThisYear
   output "Enter sales for fourth quarter this year "
   input salesQuarter4ThisYear
   output "Enter sales for first quarter last year "
   input salesQuarter1LastYear
   output "Enter sales for second quarter last year "
   input salesQuarter2LastYear
   output "Enter sales for third quarter last year "
   input salesQuarter3LastYear
   output "Enter sales for fourth quarter last year "
   input salesQuarter4LastYear
return

sumSalesData()
    totalThisYear = salesQuarter1ThisYear + salesQuarter2ThisYear +
       salesQuarter3ThisYear + salesQuarter4ThisYear
    totalLastYear = salesQuarter1LastYear + salesQuarter2LastYear +
       salesQuarter3LastYear + salesQuarter4LastYear
return

finishUp()
   output "End of report"
return




// DEBUG04-03
// This pseudocode should determine and output the rental fees for cars.
// Standard cars rent for $65 per day, compacts rent for $40 per day,
// and subcompacts rent for $30 per day. Rentals for at least 7 days
// receive a 20% discount. An error message is displayed if the car type
// is not valid.

start
   Declarations
      string carType
      num days
      num STD_RATE = 65
      num COM_RATE = 40
      num SUB_RATE = 30
      num DAYS_FOR_DISCOUNT = 10
      num DISCOUNT_RATE = 0.20
      string QUIT = "ZZZZ"
   getReady()
   while carType <> QUIT
      detailLoop()
   endwhile
   finish()
stop

getReady()
   output Enter car type or , QUIT, to quit
   input carType
return

detailLoop()
   output "Enter days rented "
   input days
   if carType = "Standard" then
      rate = STD_RATE
   else
      if car_Type = "Compact" then
          rate = COMPACT_RATE
      else
         if carType = "Subcompact" then
            rate = SUB_RATE
         else
            rate = 0
            output "Invalid car type"
         endif
      endif
   endif
   if rate <> 0
      if days >= DAYS_FOR_DISCOUNT then
         rate = rate * DISCOUNT_RATE
      endif
      output carType, days
   output "Enter car type or ", QUIT, " to quit "
   input carType
return

finish()
   output "End of program"
return


// post correction
// DEBUG04-03
start
   Declarations
      string carType
      num days
      num rate
      num totalCost
      num STD_RATE = 65
      num COM_RATE = 40
      num SUB_RATE = 30
      num DAYS_FOR_DISCOUNT = 7  // Corrected from 10 to 7
      num DISCOUNT_RATE = 0.20
      string QUIT = "ZZZZ"
   getReady()
   while carType <> QUIT
      detailLoop()
   endwhile
   finish()
stop

getReady()
   output "Enter car type or ", QUIT, " to quit"  // Corrected format
   input carType
return

detailLoop()
   output "Enter days rented"
   input days
   if carType = "Standard" then
      rate = STD_RATE
   else if carType = "Compact" then  // Corrected car_Type and COMPACT_RATE
      rate = COM_RATE
   else if carType = "Subcompact" then
      rate = SUB_RATE
   else
      output "Invalid car type"
      rate = 0
   endif
   if rate <> 0 then
      totalCost = rate * days
      if days >= DAYS_FOR_DISCOUNT then
         totalCost = totalCost - (totalCost * DISCOUNT_RATE)  // Apply discount on total cost
      endif
      output "The total cost for renting a ", carType, " for ", days, " days is $", totalCost
   endif
   output "Enter car type or ", QUIT, " to quit"
   input carType
return

finish()
   output "End of program"
return




// Create a text file with the pseudocode for a guessing game in which the application generates a random number and the player tries to guess it. Display a message indicating whether the player’s guess was correct, too high, or too low.

Start
   Declarations
      num LIMIT = 100 // Set the limit for the random number
      num randomNumber
      num playerGuess
      num attempts = 0

   // Generate a random number between 1 and LIMIT
   randomNumber = Random(1, LIMIT)
   
   Output "I have chosen a number between 1 and ", LIMIT, ". Try to guess it!"

   // Player's initial guess
   Output "Enter your guess:"
   Input playerGuess
   attempts = attempts + 1

   // Game loop - continues until the player guesses correctly
   While playerGuess not equal to randomNumber
      If playerGuess > randomNumber Then
         Output "Too high! Try again:"
      Else
         Output "Too low! Try again:"
      EndIf
      Input playerGuess
      attempts = attempts + 1
   EndWhile

   // Player has guessed correctly
   Output "Correct! The number was ", randomNumber, "."
   Output "You guessed it in ", attempts, " attempts."

Stop
