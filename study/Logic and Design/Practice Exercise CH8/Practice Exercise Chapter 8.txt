// MAINTENANCE08-01
....

// MAINTENANCE08-01
// post correction
Program RealEstateSales
    // Declarations
    Constant num MAX_SIZE = 60
    num SIZE
    string names[MAX_SIZE]
    num properties[MAX_SIZE]
    num values[MAX_SIZE]
    num count = 0
    num NUM_TO_DISPLAY = 3
    string displayChoice

    // Initialize the application
    getReady()

    // Sort and display the data
    display()

    // Conclude the program
    finish()
End Program

Subroutine getReady
    // Prompt the user for the number of salespeople
    output "Enter the number of salespeople (up to 60):"
    input SIZE
    SIZE = SIZE > MAX_SIZE ? MAX_SIZE : SIZE  // Ensure SIZE does not exceed MAX_SIZE

    // Input data for each salesperson
    while count < SIZE
        output "Enter salesperson name:"
        input names[count]
        output "Enter number of properties sold:"
        input properties[count]
        output "Enter total value of those properties:"
        input values[count]
        count = count + 1
    endwhile
End Subroutine

Subroutine display
    // Ask the user to choose sorting criteria
    output "Sort by (1) total value or (2) number of properties sold:"
    input displayChoice

    // Sort data based on user's choice
    if displayChoice = "1" then
        sort("value")
    else
        sort("properties")
    endif

    // Display top three or fewer if less than three entries
    num entriesToShow = SIZE < NUM_TO_DISPLAY ? SIZE : NUM_TO_DISPLAY
    for num i = 0 to entriesToShow - 1
        output names[i], properties[i], values[i]
    next i
End Subroutine

Subroutine sort(criteria)
    // Perform a bubble sort based on the specified criteria
    for num y = 0 to SIZE - 2
        for num x = 0 to SIZE - y - 2
            if (criteria = "value" and values[x] < values[x + 1]) or (criteria = "properties" and properties[x] < properties[x + 1]) then
                swap(x, x + 1)
            endif
        next x
    next y
End Subroutine

Subroutine swap(i, j)
    // Swap elements at indices i and j
    string tempName = names[j]
    names[j] = names[i]
    names[i] = tempName

    num tempProp = properties[j]
    properties[j] = properties[i]
    properties[i] = tempProp

    num tempVal = values[j]
    values[j] = values[i]
    values[i] = tempVal
End Subroutine

Subroutine finish
    output "End of display"
End Subroutine




// DEBUG08-01
....

// DEBUG08-01
// post correction
Program Main
    Declarations
        num SIZE = 10
        num numbers[SIZE]
        num count = 0

    // Read numbers from user
    While count < SIZE
        Output "Enter a number: "
        Input numbers[count]
        count = count + 1
    EndWhile

    // Sort numbers in descending order
    Call sort(numbers, SIZE)

    // Display the highest three numbers
    Output "The highest three are ", numbers[0], numbers[1], numbers[2]
End Program

Subroutine sort(numbers, SIZE)
    num x = 0
    num y = 0
    num temp

    // Use bubble sort for simplicity
    For y = 0 To SIZE - 2
        For x = 0 To SIZE - y - 2
            If numbers[x] < numbers[x + 1] Then
                // Swap elements
                temp = numbers[x + 1]
                numbers[x + 1] = numbers[x]
                numbers[x] = temp
            EndIf
        Next x
    Next y
End Subroutine




// DEBUG08-02
...

// DEBUG08-02
// post correction
Program StudentTypingTest
    Declarations
        num MAX_ERRORS = 2
        num errors
        num wordsPerMinute
        string grades[5][3] = {
            {"C", "D", "F"},
            {"C", "C", "F"},
            {"B", "C", "D"},
            {"A", "B", "C"},
            {"A", "A", "B"}
        }
        num speedLimits[5] = {30, 50, 80, 100, 1000}  // Add reasonable upper limit for readability
        num LIMITS = 5
        num speedCategory = 0
        string grade
        
    Output "Enter number of errors on the test: "
    Input errors
    If errors > MAX_ERRORS Then
        errors = 2  // Set to highest error category if over MAX_ERRORS
    EndIf

    Output "Enter the speed in words per minute: "
    Input wordsPerMinute

    // Determine the speed category
    While speedCategory < LIMITS AND wordsPerMinute > speedLimits[speedCategory]
        speedCategory = speedCategory + 1
    EndWhile

    // Adjust speedCategory to fit into array index properly
    If speedCategory > 0 Then
        speedCategory = speedCategory - 1
    EndIf

    // Assign grade based on errors and words per minute
    grade = grades[speedCategory][errors]

    Output "Your grade is ", grade
End Program




// DEBUG08-03
...

// DEBUG08-03
// post correction
Program Main
    Declarations
        num SIZE = 100
        num QUIT = 99999
        num saleAmount
        num sales[SIZE]
        num count = 0
        num middlePosition
        num x
        num y
        num temp

    // Read sale amounts from user
    Output "Enter sale amount (or 99999 to quit): "
    Input saleAmount
    While saleAmount <> QUIT and count < SIZE
        sales[count] = saleAmount
        count = count + 1
        If count < SIZE Then
            Output "Enter next sale amount (or 99999 to quit): "
            Input saleAmount
        EndIf
    EndWhile

    // Sort sales and find median
    Call sort(sales, count)
    If count > 0 Then
        middlePosition = count / 2
        Output "The median sale amount is ", sales[middlePosition]
    Else
        Output "No sales data entered."
    EndIf
End Program

Subroutine sort(sales, count)
    For y = 0 To count - 2
        For x = 0 To count - y - 2
            If sales[x] > sales[x + 1] Then
                Call swap(sales, x)
            EndIf
        Next x
    Next y
End Subroutine

Subroutine swap(sales, x)
    num temp = sales[x + 1]
    sales[x + 1] = sales[x]
    sales[x] = temp
End Subroutine



// In Session 5, you designed a guessing game in which the application generates a random number and the player tries to guess it. After each guess, you displayed a message indicating whether the player's guess was correct, too high, or too low. When the player eventually guessed the correct number, you displayed a score that represented a count of the number of required guesses. Now, modify that program to allow a player to replay the game as many times as they like, up to 20 times. When the player is done, display the scores from highest to lowest, and display the mean and median scores. Save the game file for submission. //

Program GuessingGame
    Declare scores[20] As Integer
    Declare playAgain As String
    Declare gameCount As Integer = 0
    Declare guess, randomNumber, tries As Integer
    Declare totalScore As Integer = 0

    While gameCount < 20
        Set randomNumber = RandomNumber(1, 100)  // Generate a random number between 1 and 100
        Set tries = 0

        Repeat
            Display "Guess a number between 1 and 100:"
            Input guess
            Increment tries

            If guess > randomNumber Then
                Display "Too high!"
            Else If guess < randomNumber Then
                Display "Too low!"
            End If
        Until guess = randomNumber

        Display "Correct! It took you " & tries & " tries."
        Set scores[gameCount] = tries
        Increment totalScore by tries

        Display "Do you want to play again? (yes/no):"
        Input playAgain
        If playAgain = "no" Then
            Exit While
        End If

        Increment gameCount
    End While

    // Sorting scores from highest to lowest
    Call SortScoresDescending(scores, gameCount)

    // Displaying scores and calculating statistical data
    Display "Game scores from highest to lowest:"
    For i = 0 To gameCount - 1
        Display scores[i]
    Next i

    Display "Mean score: " & (totalScore / gameCount)
    Display "Median score: " & CalculateMedian(scores, gameCount)
End Program

// Function to sort scores in descending order
Sub SortScoresDescending(scores, count)
    // Implement bubble sort or any sorting algorithm to sort array
End Sub

// Function to calculate median
Function CalculateMedian(scores, count) As Integer
    // Assuming scores array is already sorted
    If count mod 2 = 0 Then
        // If even number of elements, median is average of two middle numbers
        Return (scores[count / 2 - 1] + scores[count / 2]) / 2
    Else
        // If odd, median is middle element
        Return scores[count / 2]
    End If
End Function















